
GPIO_Expadner_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002924  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002aac  08002aac  00003aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aec  08002aec  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002aec  08002aec  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aec  08002aec  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aec  08002aec  00003aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002af0  08002af0  00003af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002af4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002b00  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002b00  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fde  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f7  00000000  00000000  0000b01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0000c818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000609  00000000  00000000  0000d040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cc7  00000000  00000000  0000d649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009920  00000000  00000000  00032310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e08be  00000000  00000000  0003bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c4ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f08  00000000  00000000  0011c534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011e43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a94 	.word	0x08002a94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002a94 	.word	0x08002a94

080001c8 <write_reg>:

#include "spi.h"


static void write_reg(uint8_t ADDR, uint8_t reg, uint8_t Data)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
 80001d2:	460b      	mov	r3, r1
 80001d4:	71bb      	strb	r3, [r7, #6]
 80001d6:	4613      	mov	r3, r2
 80001d8:	717b      	strb	r3, [r7, #5]
    uint8_t sendData[3] = {ADDR, reg, Data};
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	733b      	strb	r3, [r7, #12]
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	737b      	strb	r3, [r7, #13]
 80001e2:	797b      	ldrb	r3, [r7, #5]
 80001e4:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2101      	movs	r1, #1
 80001ea:	480c      	ldr	r0, [pc, #48]	@ (800021c <write_reg+0x54>)
 80001ec:	f000 fea8 	bl	8000f40 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(&hspi1, sendData, 3, 100) != HAL_OK) {
 80001f0:	f107 010c 	add.w	r1, r7, #12
 80001f4:	2364      	movs	r3, #100	@ 0x64
 80001f6:	2203      	movs	r2, #3
 80001f8:	4809      	ldr	r0, [pc, #36]	@ (8000220 <write_reg+0x58>)
 80001fa:	f001 fd88 	bl	8001d0e <HAL_SPI_Transmit>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <write_reg+0x40>
        Error_Handler();
 8000204:	f000 fa81 	bl	800070a <Error_Handler>
    }
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000208:	2201      	movs	r2, #1
 800020a:	2101      	movs	r1, #1
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <write_reg+0x54>)
 800020e:	f000 fe97 	bl	8000f40 <HAL_GPIO_WritePin>
}
 8000212:	bf00      	nop
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	48000800 	.word	0x48000800
 8000220:	20000028 	.word	0x20000028

08000224 <MCP23S08_EP_Write_Reg>:
static void MCP23S08_EP_Write_Reg (uint8_t reg, uint8_t Data)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	460a      	mov	r2, r1
 800022e:	71fb      	strb	r3, [r7, #7]
 8000230:	4613      	mov	r3, r2
 8000232:	71bb      	strb	r3, [r7, #6]
	write_reg(0x40, reg, Data);
 8000234:	79ba      	ldrb	r2, [r7, #6]
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4619      	mov	r1, r3
 800023a:	2040      	movs	r0, #64	@ 0x40
 800023c:	f7ff ffc4 	bl	80001c8 <write_reg>
}
 8000240:	bf00      	nop
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <read_reg>:

static uint8_t read_reg(uint8_t ADDR, uint8_t reg)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	460a      	mov	r2, r1
 8000252:	71fb      	strb	r3, [r7, #7]
 8000254:	4613      	mov	r3, r2
 8000256:	71bb      	strb	r3, [r7, #6]
    uint8_t receiveData[2] = {ADDR, reg};
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	733b      	strb	r3, [r7, #12]
 800025c:	79bb      	ldrb	r3, [r7, #6]
 800025e:	737b      	strb	r3, [r7, #13]
    uint8_t data = 0;
 8000260:	2300      	movs	r3, #0
 8000262:	72fb      	strb	r3, [r7, #11]

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	4812      	ldr	r0, [pc, #72]	@ (80002b4 <read_reg+0x6c>)
 800026a:	f000 fe69 	bl	8000f40 <HAL_GPIO_WritePin>

    if (HAL_SPI_Transmit(&hspi1, receiveData, 2, 100) != HAL_OK)
 800026e:	f107 010c 	add.w	r1, r7, #12
 8000272:	2364      	movs	r3, #100	@ 0x64
 8000274:	2202      	movs	r2, #2
 8000276:	4810      	ldr	r0, [pc, #64]	@ (80002b8 <read_reg+0x70>)
 8000278:	f001 fd49 	bl	8001d0e <HAL_SPI_Transmit>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <read_reg+0x3e>
    {
        Error_Handler();
 8000282:	f000 fa42 	bl	800070a <Error_Handler>
    }

    if (HAL_SPI_Receive(&hspi1, &data, 1, 100) != HAL_OK)
 8000286:	f107 010b 	add.w	r1, r7, #11
 800028a:	2364      	movs	r3, #100	@ 0x64
 800028c:	2201      	movs	r2, #1
 800028e:	480a      	ldr	r0, [pc, #40]	@ (80002b8 <read_reg+0x70>)
 8000290:	f001 feb3 	bl	8001ffa <HAL_SPI_Receive>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <read_reg+0x56>
    {
        Error_Handler();
 800029a:	f000 fa36 	bl	800070a <Error_Handler>
    }

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	2101      	movs	r1, #1
 80002a2:	4804      	ldr	r0, [pc, #16]	@ (80002b4 <read_reg+0x6c>)
 80002a4:	f000 fe4c 	bl	8000f40 <HAL_GPIO_WritePin>

    return data;
 80002a8:	7afb      	ldrb	r3, [r7, #11]
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	3710      	adds	r7, #16
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	48000800 	.word	0x48000800
 80002b8:	20000028 	.word	0x20000028

080002bc <MCP23S08_EP_Read_Reg>:

static uint8_t  MCP23S08_EP_Read_Reg (uint8_t reg)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = read_reg(0x41, reg);
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	4619      	mov	r1, r3
 80002ca:	2041      	movs	r0, #65	@ 0x41
 80002cc:	f7ff ffbc 	bl	8000248 <read_reg>
 80002d0:	4603      	mov	r3, r0
 80002d2:	73fb      	strb	r3, [r7, #15]
	return data;
 80002d4:	7bfb      	ldrb	r3, [r7, #15]


}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3710      	adds	r7, #16
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <MCP23S08_EP_pinMode>:

void MCP23S08_EP_pinMode(MCP23S08_EP_PIN GPx, MCP23S08_EP_PIN_STATE state)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	460a      	mov	r2, r1
 80002ea:	71fb      	strb	r3, [r7, #7]
 80002ec:	4613      	mov	r3, r2
 80002ee:	71bb      	strb	r3, [r7, #6]

    uint8_t iodir = MCP23S08_EP_Read_Reg(IODIR);
 80002f0:	2000      	movs	r0, #0
 80002f2:	f7ff ffe3 	bl	80002bc <MCP23S08_EP_Read_Reg>
 80002f6:	4603      	mov	r3, r0
 80002f8:	73fb      	strb	r3, [r7, #15]

    switch (GPx)
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2b07      	cmp	r3, #7
 80002fe:	d87b      	bhi.n	80003f8 <MCP23S08_EP_pinMode+0x118>
 8000300:	a201      	add	r2, pc, #4	@ (adr r2, 8000308 <MCP23S08_EP_pinMode+0x28>)
 8000302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000306:	bf00      	nop
 8000308:	08000329 	.word	0x08000329
 800030c:	08000343 	.word	0x08000343
 8000310:	0800035d 	.word	0x0800035d
 8000314:	08000377 	.word	0x08000377
 8000318:	08000391 	.word	0x08000391
 800031c:	080003ab 	.word	0x080003ab
 8000320:	080003c5 	.word	0x080003c5
 8000324:	080003df 	.word	0x080003df
    {
        case GP0: state == GPx_INPUT ? (iodir |= 1 << 0) : (iodir &= ~(1 << 0)); break;
 8000328:	79bb      	ldrb	r3, [r7, #6]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d104      	bne.n	8000338 <MCP23S08_EP_pinMode+0x58>
 800032e:	7bfb      	ldrb	r3, [r7, #15]
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	73fb      	strb	r3, [r7, #15]
 8000336:	e060      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
 8000338:	7bfb      	ldrb	r3, [r7, #15]
 800033a:	f023 0301 	bic.w	r3, r3, #1
 800033e:	73fb      	strb	r3, [r7, #15]
 8000340:	e05b      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
        case GP1: state == GPx_INPUT ? (iodir |= 1 << 1) : (iodir &= ~(1 << 1)); break;
 8000342:	79bb      	ldrb	r3, [r7, #6]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d104      	bne.n	8000352 <MCP23S08_EP_pinMode+0x72>
 8000348:	7bfb      	ldrb	r3, [r7, #15]
 800034a:	f043 0302 	orr.w	r3, r3, #2
 800034e:	73fb      	strb	r3, [r7, #15]
 8000350:	e053      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	f023 0302 	bic.w	r3, r3, #2
 8000358:	73fb      	strb	r3, [r7, #15]
 800035a:	e04e      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
        case GP2: state == GPx_INPUT ? (iodir |= 1 << 2) : (iodir &= ~(1 << 2)); break;
 800035c:	79bb      	ldrb	r3, [r7, #6]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d104      	bne.n	800036c <MCP23S08_EP_pinMode+0x8c>
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	73fb      	strb	r3, [r7, #15]
 800036a:	e046      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
 800036c:	7bfb      	ldrb	r3, [r7, #15]
 800036e:	f023 0304 	bic.w	r3, r3, #4
 8000372:	73fb      	strb	r3, [r7, #15]
 8000374:	e041      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
        case GP3: state == GPx_INPUT ? (iodir |= 1 << 3) : (iodir &= ~(1 << 3)); break;
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	2b01      	cmp	r3, #1
 800037a:	d104      	bne.n	8000386 <MCP23S08_EP_pinMode+0xa6>
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	73fb      	strb	r3, [r7, #15]
 8000384:	e039      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	f023 0308 	bic.w	r3, r3, #8
 800038c:	73fb      	strb	r3, [r7, #15]
 800038e:	e034      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
        case GP4: state == GPx_INPUT ? (iodir |= 1 << 4) : (iodir &= ~(1 << 4)); break;
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d104      	bne.n	80003a0 <MCP23S08_EP_pinMode+0xc0>
 8000396:	7bfb      	ldrb	r3, [r7, #15]
 8000398:	f043 0310 	orr.w	r3, r3, #16
 800039c:	73fb      	strb	r3, [r7, #15]
 800039e:	e02c      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	f023 0310 	bic.w	r3, r3, #16
 80003a6:	73fb      	strb	r3, [r7, #15]
 80003a8:	e027      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
        case GP5: state == GPx_INPUT ? (iodir |= 1 << 5) : (iodir &= ~(1 << 5)); break;
 80003aa:	79bb      	ldrb	r3, [r7, #6]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d104      	bne.n	80003ba <MCP23S08_EP_pinMode+0xda>
 80003b0:	7bfb      	ldrb	r3, [r7, #15]
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	73fb      	strb	r3, [r7, #15]
 80003b8:	e01f      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	f023 0320 	bic.w	r3, r3, #32
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	e01a      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
        case GP6: state == GPx_INPUT ? (iodir |= 1 << 6) : (iodir &= ~(1 << 6)); break;
 80003c4:	79bb      	ldrb	r3, [r7, #6]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d104      	bne.n	80003d4 <MCP23S08_EP_pinMode+0xf4>
 80003ca:	7bfb      	ldrb	r3, [r7, #15]
 80003cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003d0:	73fb      	strb	r3, [r7, #15]
 80003d2:	e012      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
 80003d4:	7bfb      	ldrb	r3, [r7, #15]
 80003d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80003da:	73fb      	strb	r3, [r7, #15]
 80003dc:	e00d      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
        case GP7: state == GPx_INPUT ? (iodir |= 1 << 7) : (iodir &= ~(1 << 7)); break;
 80003de:	79bb      	ldrb	r3, [r7, #6]
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d104      	bne.n	80003ee <MCP23S08_EP_pinMode+0x10e>
 80003e4:	7bfb      	ldrb	r3, [r7, #15]
 80003e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80003ea:	73fb      	strb	r3, [r7, #15]
 80003ec:	e005      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80003f4:	73fb      	strb	r3, [r7, #15]
 80003f6:	e000      	b.n	80003fa <MCP23S08_EP_pinMode+0x11a>
        default: break;
 80003f8:	bf00      	nop

            return;
    }


    MCP23S08_EP_Write_Reg(IODIR, iodir);
 80003fa:	7bfb      	ldrb	r3, [r7, #15]
 80003fc:	4619      	mov	r1, r3
 80003fe:	2000      	movs	r0, #0
 8000400:	f7ff ff10 	bl	8000224 <MCP23S08_EP_Write_Reg>
}
 8000404:	bf00      	nop
 8000406:	3710      	adds	r7, #16
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <MCP23S08_WRITE_PIN>:

	MCP23S08_EP_Write_Reg(GPPU, gppu);
}

void MCP23S08_WRITE_PIN(MCP23S08_EP_PIN GPx, MCP23S08_EP_PIN_STATE_RS_STATUS SET_RESET)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	460a      	mov	r2, r1
 8000416:	71fb      	strb	r3, [r7, #7]
 8000418:	4613      	mov	r3, r2
 800041a:	71bb      	strb	r3, [r7, #6]
    uint8_t iodir = MCP23S08_EP_Read_Reg(IODIR);
 800041c:	2000      	movs	r0, #0
 800041e:	f7ff ff4d 	bl	80002bc <MCP23S08_EP_Read_Reg>
 8000422:	4603      	mov	r3, r0
 8000424:	73bb      	strb	r3, [r7, #14]


    if (iodir & (1 << GPx))
 8000426:	7bba      	ldrb	r2, [r7, #14]
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	fa42 f303 	asr.w	r3, r2, r3
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	2b00      	cmp	r3, #0
 8000434:	f040 8092 	bne.w	800055c <MCP23S08_WRITE_PIN+0x150>
    {
        return;
    }


    uint8_t olat = MCP23S08_EP_Read_Reg(OLAT);
 8000438:	200a      	movs	r0, #10
 800043a:	f7ff ff3f 	bl	80002bc <MCP23S08_EP_Read_Reg>
 800043e:	4603      	mov	r3, r0
 8000440:	73fb      	strb	r3, [r7, #15]


    switch (GPx)
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	2b07      	cmp	r3, #7
 8000446:	f200 808b 	bhi.w	8000560 <MCP23S08_WRITE_PIN+0x154>
 800044a:	a201      	add	r2, pc, #4	@ (adr r2, 8000450 <MCP23S08_WRITE_PIN+0x44>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	08000471 	.word	0x08000471
 8000454:	0800048d 	.word	0x0800048d
 8000458:	080004a9 	.word	0x080004a9
 800045c:	080004c5 	.word	0x080004c5
 8000460:	080004e1 	.word	0x080004e1
 8000464:	080004fd 	.word	0x080004fd
 8000468:	08000519 	.word	0x08000519
 800046c:	08000535 	.word	0x08000535
    {
        case GP0:
            olat = (SET_RESET == GPx_SET) ? (olat | (1 << 0)) : (olat & ~(1 << 0));
 8000470:	79bb      	ldrb	r3, [r7, #6]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d104      	bne.n	8000480 <MCP23S08_WRITE_PIN+0x74>
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	b2db      	uxtb	r3, r3
 800047e:	e003      	b.n	8000488 <MCP23S08_WRITE_PIN+0x7c>
 8000480:	7bfb      	ldrb	r3, [r7, #15]
 8000482:	f023 0301 	bic.w	r3, r3, #1
 8000486:	b2db      	uxtb	r3, r3
 8000488:	73fb      	strb	r3, [r7, #15]
            break;
 800048a:	e061      	b.n	8000550 <MCP23S08_WRITE_PIN+0x144>
        case GP1:
            olat = (SET_RESET ==  GPx_SET) ? (olat | (1 << 1)) : (olat & ~(1 << 1));
 800048c:	79bb      	ldrb	r3, [r7, #6]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d104      	bne.n	800049c <MCP23S08_WRITE_PIN+0x90>
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	f043 0302 	orr.w	r3, r3, #2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	e003      	b.n	80004a4 <MCP23S08_WRITE_PIN+0x98>
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	f023 0302 	bic.w	r3, r3, #2
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	73fb      	strb	r3, [r7, #15]
            break;
 80004a6:	e053      	b.n	8000550 <MCP23S08_WRITE_PIN+0x144>
        case GP2:
            olat = (SET_RESET ==  GPx_SET) ? (olat | (1 << 2)) : (olat & ~(1 << 2));
 80004a8:	79bb      	ldrb	r3, [r7, #6]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d104      	bne.n	80004b8 <MCP23S08_WRITE_PIN+0xac>
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	e003      	b.n	80004c0 <MCP23S08_WRITE_PIN+0xb4>
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
 80004ba:	f023 0304 	bic.w	r3, r3, #4
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	73fb      	strb	r3, [r7, #15]
            break;
 80004c2:	e045      	b.n	8000550 <MCP23S08_WRITE_PIN+0x144>
        case GP3:
            olat = (SET_RESET ==  GPx_SET) ? (olat | (1 << 3)) : (olat & ~(1 << 3));
 80004c4:	79bb      	ldrb	r3, [r7, #6]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d104      	bne.n	80004d4 <MCP23S08_WRITE_PIN+0xc8>
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	f043 0308 	orr.w	r3, r3, #8
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	e003      	b.n	80004dc <MCP23S08_WRITE_PIN+0xd0>
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	f023 0308 	bic.w	r3, r3, #8
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	73fb      	strb	r3, [r7, #15]
            break;
 80004de:	e037      	b.n	8000550 <MCP23S08_WRITE_PIN+0x144>
        case GP4:
            olat = (SET_RESET ==  GPx_SET) ? (olat | (1 << 4)) : (olat & ~(1 << 4));
 80004e0:	79bb      	ldrb	r3, [r7, #6]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d104      	bne.n	80004f0 <MCP23S08_WRITE_PIN+0xe4>
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	f043 0310 	orr.w	r3, r3, #16
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	e003      	b.n	80004f8 <MCP23S08_WRITE_PIN+0xec>
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	f023 0310 	bic.w	r3, r3, #16
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	73fb      	strb	r3, [r7, #15]
            break;
 80004fa:	e029      	b.n	8000550 <MCP23S08_WRITE_PIN+0x144>
        case GP5:
            olat = (SET_RESET ==  GPx_SET) ? (olat | (1 << 5)) : (olat & ~(1 << 5));
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d104      	bne.n	800050c <MCP23S08_WRITE_PIN+0x100>
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	f043 0320 	orr.w	r3, r3, #32
 8000508:	b2db      	uxtb	r3, r3
 800050a:	e003      	b.n	8000514 <MCP23S08_WRITE_PIN+0x108>
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	f023 0320 	bic.w	r3, r3, #32
 8000512:	b2db      	uxtb	r3, r3
 8000514:	73fb      	strb	r3, [r7, #15]
            break;
 8000516:	e01b      	b.n	8000550 <MCP23S08_WRITE_PIN+0x144>
        case GP6:
            olat = (SET_RESET ==  GPx_SET) ? (olat | (1 << 6)) : (olat & ~(1 << 6));
 8000518:	79bb      	ldrb	r3, [r7, #6]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d104      	bne.n	8000528 <MCP23S08_WRITE_PIN+0x11c>
 800051e:	7bfb      	ldrb	r3, [r7, #15]
 8000520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000524:	b2db      	uxtb	r3, r3
 8000526:	e003      	b.n	8000530 <MCP23S08_WRITE_PIN+0x124>
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800052e:	b2db      	uxtb	r3, r3
 8000530:	73fb      	strb	r3, [r7, #15]
            break;
 8000532:	e00d      	b.n	8000550 <MCP23S08_WRITE_PIN+0x144>
        case GP7:
            olat = (SET_RESET ==  GPx_SET) ? (olat | (1 << 7)) : (olat & ~(1 << 7));
 8000534:	79bb      	ldrb	r3, [r7, #6]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d104      	bne.n	8000544 <MCP23S08_WRITE_PIN+0x138>
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000540:	b2db      	uxtb	r3, r3
 8000542:	e003      	b.n	800054c <MCP23S08_WRITE_PIN+0x140>
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800054a:	b2db      	uxtb	r3, r3
 800054c:	73fb      	strb	r3, [r7, #15]
            break;
 800054e:	bf00      	nop
        default:
            return;
    }


    MCP23S08_EP_Write_Reg(OLAT, olat);
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	4619      	mov	r1, r3
 8000554:	200a      	movs	r0, #10
 8000556:	f7ff fe65 	bl	8000224 <MCP23S08_EP_Write_Reg>
 800055a:	e002      	b.n	8000562 <MCP23S08_WRITE_PIN+0x156>
        return;
 800055c:	bf00      	nop
 800055e:	e000      	b.n	8000562 <MCP23S08_WRITE_PIN+0x156>
            return;
 8000560:	bf00      	nop
}
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <MCP23S08_EP_Init>:
    }
}


HAL_StatusTypeDef MCP23S08_EP_Init (void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    if (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 800056c:	4810      	ldr	r0, [pc, #64]	@ (80005b0 <MCP23S08_EP_Init+0x48>)
 800056e:	f002 f89b 	bl	80026a8 <HAL_SPI_GetState>
 8000572:	4603      	mov	r3, r0
 8000574:	2b01      	cmp	r3, #1
 8000576:	d001      	beq.n	800057c <MCP23S08_EP_Init+0x14>
        return HAL_ERROR;
 8000578:	2301      	movs	r3, #1
 800057a:	e016      	b.n	80005aa <MCP23S08_EP_Init+0x42>
    }
	  	MCP23S08_EP_Write_Reg(IODIR, 0x00); // Wszystkie piny jako wyjścia
 800057c:	2100      	movs	r1, #0
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff fe50 	bl	8000224 <MCP23S08_EP_Write_Reg>
	    MCP23S08_EP_Write_Reg(GPPU, 0x00);	// bez pullup'ow
 8000584:	2100      	movs	r1, #0
 8000586:	2006      	movs	r0, #6
 8000588:	f7ff fe4c 	bl	8000224 <MCP23S08_EP_Write_Reg>

	    if (MCP23S08_EP_Read_Reg(IODIR)!=0x00 || MCP23S08_EP_Read_Reg(GPPU) != 0x00)
 800058c:	2000      	movs	r0, #0
 800058e:	f7ff fe95 	bl	80002bc <MCP23S08_EP_Read_Reg>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d105      	bne.n	80005a4 <MCP23S08_EP_Init+0x3c>
 8000598:	2006      	movs	r0, #6
 800059a:	f7ff fe8f 	bl	80002bc <MCP23S08_EP_Read_Reg>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MCP23S08_EP_Init+0x40>
	    {
	    	return HAL_ERROR;
 80005a4:	2301      	movs	r3, #1
 80005a6:	e000      	b.n	80005aa <MCP23S08_EP_Init+0x42>
	    }

	    return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028

080005b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b17      	ldr	r3, [pc, #92]	@ (8000628 <MX_GPIO_Init+0x74>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	4a16      	ldr	r2, [pc, #88]	@ (8000628 <MX_GPIO_Init+0x74>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d6:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <MX_GPIO_Init+0x74>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <MX_GPIO_Init+0x74>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	4a10      	ldr	r2, [pc, #64]	@ (8000628 <MX_GPIO_Init+0x74>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <MX_GPIO_Init+0x74>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2101      	movs	r1, #1
 80005fe:	480b      	ldr	r0, [pc, #44]	@ (800062c <MX_GPIO_Init+0x78>)
 8000600:	f000 fc9e 	bl	8000f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000604:	2301      	movs	r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	4619      	mov	r1, r3
 800061a:	4804      	ldr	r0, [pc, #16]	@ (800062c <MX_GPIO_Init+0x78>)
 800061c:	f000 fae6 	bl	8000bec <HAL_GPIO_Init>

}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40021000 	.word	0x40021000
 800062c:	48000800 	.word	0x48000800

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 f97f 	bl	8000936 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f815 	bl	8000666 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f7ff ffba 	bl	80005b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000640:	f000 f86a 	bl	8000718 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if(MCP23S08_EP_Init()!= HAL_OK)
 8000644:	f7ff ff90 	bl	8000568 <MCP23S08_EP_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <main+0x22>
	  Error_Handler();
 800064e:	f000 f85c 	bl	800070a <Error_Handler>
  MCP23S08_EP_pinMode(GP0, GPx_OUTPUT);
 8000652:	2100      	movs	r1, #0
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff fe43 	bl	80002e0 <MCP23S08_EP_pinMode>
  MCP23S08_WRITE_PIN(GP0, GPx_SET);
 800065a:	2100      	movs	r1, #0
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff fed5 	bl	800040c <MCP23S08_WRITE_PIN>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000662:	bf00      	nop
 8000664:	e7fd      	b.n	8000662 <main+0x32>

08000666 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b096      	sub	sp, #88	@ 0x58
 800066a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2244      	movs	r2, #68	@ 0x44
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f002 f9e1 	bl	8002a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000688:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800068c:	f000 fc7e 	bl	8000f8c <HAL_PWREx_ControlVoltageScaling>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000696:	f000 f838 	bl	800070a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800069a:	2310      	movs	r3, #16
 800069c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800069e:	2301      	movs	r3, #1
 80006a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a6:	2360      	movs	r3, #96	@ 0x60
 80006a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006ae:	2301      	movs	r3, #1
 80006b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006b6:	2328      	movs	r3, #40	@ 0x28
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ba:	2307      	movs	r3, #7
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fcb4 	bl	8001038 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006d6:	f000 f818 	bl	800070a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2303      	movs	r3, #3
 80006e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	2104      	movs	r1, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 f87c 	bl	80017f0 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006fe:	f000 f804 	bl	800070a <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3758      	adds	r7, #88	@ 0x58
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070e:	b672      	cpsid	i
}
 8000710:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000712:	bf00      	nop
 8000714:	e7fd      	b.n	8000712 <Error_Handler+0x8>
	...

08000718 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_SPI1_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	@ (8000790 <MX_SPI1_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_SPI1_Init+0x74>)
 8000724:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_SPI1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_SPI1_Init+0x74>)
 8000732:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000736:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_SPI1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_SPI1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_SPI1_Init+0x74>)
 8000746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_SPI1_Init+0x74>)
 800074e:	2210      	movs	r2, #16
 8000750:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_SPI1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_SPI1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_SPI1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_SPI1_Init+0x74>)
 8000766:	2207      	movs	r2, #7
 8000768:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <MX_SPI1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_SPI1_Init+0x74>)
 8000772:	2208      	movs	r2, #8
 8000774:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_SPI1_Init+0x74>)
 8000778:	f001 fa26 	bl	8001bc8 <HAL_SPI_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000782:	f7ff ffc2 	bl	800070a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000028 	.word	0x20000028
 8000790:	40013000 	.word	0x40013000

08000794 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	@ 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a17      	ldr	r2, [pc, #92]	@ (8000810 <HAL_SPI_MspInit+0x7c>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d128      	bne.n	8000808 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <HAL_SPI_MspInit+0x80>)
 80007b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ba:	4a16      	ldr	r2, [pc, #88]	@ (8000814 <HAL_SPI_MspInit+0x80>)
 80007bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <HAL_SPI_MspInit+0x80>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <HAL_SPI_MspInit+0x80>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <HAL_SPI_MspInit+0x80>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <HAL_SPI_MspInit+0x80>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007e6:	23e0      	movs	r3, #224	@ 0xe0
 80007e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007f6:	2305      	movs	r3, #5
 80007f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000804:	f000 f9f2 	bl	8000bec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	@ 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40013000 	.word	0x40013000
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <HAL_MspInit+0x44>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000822:	4a0e      	ldr	r2, [pc, #56]	@ (800085c <HAL_MspInit+0x44>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6613      	str	r3, [r2, #96]	@ 0x60
 800082a:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <HAL_MspInit+0x44>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083a:	4a08      	ldr	r2, [pc, #32]	@ (800085c <HAL_MspInit+0x44>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000840:	6593      	str	r3, [r2, #88]	@ 0x58
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <NMI_Handler+0x4>

08000868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <MemManage_Handler+0x4>

08000878 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <UsageFault_Handler+0x4>

08000888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b6:	f000 f893 	bl	80009e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <SystemInit+0x20>)
 80008c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ca:	4a05      	ldr	r2, [pc, #20]	@ (80008e0 <SystemInit+0x20>)
 80008cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800091c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e8:	f7ff ffea 	bl	80008c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ec:	480c      	ldr	r0, [pc, #48]	@ (8000920 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ee:	490d      	ldr	r1, [pc, #52]	@ (8000924 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000928 <LoopForever+0xe>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a0a      	ldr	r2, [pc, #40]	@ (800092c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000904:	4c0a      	ldr	r4, [pc, #40]	@ (8000930 <LoopForever+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000912:	f002 f89b 	bl	8002a4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000916:	f7ff fe8b 	bl	8000630 <main>

0800091a <LoopForever>:

LoopForever:
    b LoopForever
 800091a:	e7fe      	b.n	800091a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800091c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000924:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000928:	08002af4 	.word	0x08002af4
  ldr r2, =_sbss
 800092c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000930:	20000090 	.word	0x20000090

08000934 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000934:	e7fe      	b.n	8000934 <ADC1_2_IRQHandler>

08000936 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800093c:	2300      	movs	r3, #0
 800093e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 f91f 	bl	8000b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000946:	200f      	movs	r0, #15
 8000948:	f000 f80e 	bl	8000968 <HAL_InitTick>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d002      	beq.n	8000958 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	71fb      	strb	r3, [r7, #7]
 8000956:	e001      	b.n	800095c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000958:	f7ff ff5e 	bl	8000818 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800095c:	79fb      	ldrb	r3, [r7, #7]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000970:	2300      	movs	r3, #0
 8000972:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <HAL_InitTick+0x6c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d023      	beq.n	80009c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800097c:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <HAL_InitTick+0x70>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <HAL_InitTick+0x6c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f91d 	bl	8000bd2 <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10f      	bne.n	80009be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	d809      	bhi.n	80009b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f000 f8f5 	bl	8000b9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b0:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <HAL_InitTick+0x74>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6013      	str	r3, [r2, #0]
 80009b6:	e007      	b.n	80009c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	73fb      	strb	r3, [r7, #15]
 80009bc:	e004      	b.n	80009c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	73fb      	strb	r3, [r7, #15]
 80009c2:	e001      	b.n	80009c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000004 	.word	0x20000004

080009e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_IncTick+0x20>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <HAL_IncTick+0x24>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	4a04      	ldr	r2, [pc, #16]	@ (8000a04 <HAL_IncTick+0x24>)
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000008 	.word	0x20000008
 8000a04:	2000008c 	.word	0x2000008c

08000a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	@ (8000a1c <HAL_GetTick+0x14>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	2000008c 	.word	0x2000008c

08000a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a52:	4a04      	ldr	r2, [pc, #16]	@ (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	60d3      	str	r3, [r2, #12]
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a6c:	4b04      	ldr	r3, [pc, #16]	@ (8000a80 <__NVIC_GetPriorityGrouping+0x18>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	f003 0307 	and.w	r3, r3, #7
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	490c      	ldr	r1, [pc, #48]	@ (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4908      	ldr	r1, [pc, #32]	@ (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	3b04      	subs	r3, #4
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	@ 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	f1c3 0307 	rsb	r3, r3, #7
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	bf28      	it	cs
 8000af6:	2304      	movcs	r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3304      	adds	r3, #4
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d902      	bls.n	8000b08 <NVIC_EncodePriority+0x30>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3b03      	subs	r3, #3
 8000b06:	e000      	b.n	8000b0a <NVIC_EncodePriority+0x32>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43da      	mvns	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43d9      	mvns	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	4313      	orrs	r3, r2
         );
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3724      	adds	r7, #36	@ 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b50:	d301      	bcc.n	8000b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00f      	b.n	8000b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <SysTick_Config+0x40>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5e:	210f      	movs	r1, #15
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f7ff ff8e 	bl	8000a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <SysTick_Config+0x40>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	4b04      	ldr	r3, [pc, #16]	@ (8000b80 <SysTick_Config+0x40>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	e000e010 	.word	0xe000e010

08000b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff47 	bl	8000a20 <__NVIC_SetPriorityGrouping>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bac:	f7ff ff5c 	bl	8000a68 <__NVIC_GetPriorityGrouping>
 8000bb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	6978      	ldr	r0, [r7, #20]
 8000bb8:	f7ff ff8e 	bl	8000ad8 <NVIC_EncodePriority>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff5d 	bl	8000a84 <__NVIC_SetPriority>
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ffb0 	bl	8000b40 <SysTick_Config>
 8000be0:	4603      	mov	r3, r0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfa:	e17f      	b.n	8000efc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	2101      	movs	r1, #1
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f000 8171 	beq.w	8000ef6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d005      	beq.n	8000c2c <HAL_GPIO_Init+0x40>
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d130      	bne.n	8000c8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	2203      	movs	r2, #3
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68da      	ldr	r2, [r3, #12]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c62:	2201      	movs	r2, #1
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	091b      	lsrs	r3, r3, #4
 8000c78:	f003 0201 	and.w	r2, r3, #1
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 0303 	and.w	r3, r3, #3
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d118      	bne.n	8000ccc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	08db      	lsrs	r3, r3, #3
 8000cb6:	f003 0201 	and.w	r2, r3, #1
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d017      	beq.n	8000d08 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d123      	bne.n	8000d5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	691a      	ldr	r2, [r3, #16]
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	08da      	lsrs	r2, r3, #3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3208      	adds	r2, #8
 8000d56:	6939      	ldr	r1, [r7, #16]
 8000d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0203 	and.w	r2, r3, #3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 80ac 	beq.w	8000ef6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b5f      	ldr	r3, [pc, #380]	@ (8000f1c <HAL_GPIO_Init+0x330>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000da2:	4a5e      	ldr	r2, [pc, #376]	@ (8000f1c <HAL_GPIO_Init+0x330>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000daa:	4b5c      	ldr	r3, [pc, #368]	@ (8000f1c <HAL_GPIO_Init+0x330>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000db6:	4a5a      	ldr	r2, [pc, #360]	@ (8000f20 <HAL_GPIO_Init+0x334>)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	220f      	movs	r2, #15
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000de0:	d025      	beq.n	8000e2e <HAL_GPIO_Init+0x242>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a4f      	ldr	r2, [pc, #316]	@ (8000f24 <HAL_GPIO_Init+0x338>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d01f      	beq.n	8000e2a <HAL_GPIO_Init+0x23e>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a4e      	ldr	r2, [pc, #312]	@ (8000f28 <HAL_GPIO_Init+0x33c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d019      	beq.n	8000e26 <HAL_GPIO_Init+0x23a>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4d      	ldr	r2, [pc, #308]	@ (8000f2c <HAL_GPIO_Init+0x340>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d013      	beq.n	8000e22 <HAL_GPIO_Init+0x236>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4c      	ldr	r2, [pc, #304]	@ (8000f30 <HAL_GPIO_Init+0x344>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d00d      	beq.n	8000e1e <HAL_GPIO_Init+0x232>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4b      	ldr	r2, [pc, #300]	@ (8000f34 <HAL_GPIO_Init+0x348>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d007      	beq.n	8000e1a <HAL_GPIO_Init+0x22e>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4a      	ldr	r2, [pc, #296]	@ (8000f38 <HAL_GPIO_Init+0x34c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d101      	bne.n	8000e16 <HAL_GPIO_Init+0x22a>
 8000e12:	2306      	movs	r3, #6
 8000e14:	e00c      	b.n	8000e30 <HAL_GPIO_Init+0x244>
 8000e16:	2307      	movs	r3, #7
 8000e18:	e00a      	b.n	8000e30 <HAL_GPIO_Init+0x244>
 8000e1a:	2305      	movs	r3, #5
 8000e1c:	e008      	b.n	8000e30 <HAL_GPIO_Init+0x244>
 8000e1e:	2304      	movs	r3, #4
 8000e20:	e006      	b.n	8000e30 <HAL_GPIO_Init+0x244>
 8000e22:	2303      	movs	r3, #3
 8000e24:	e004      	b.n	8000e30 <HAL_GPIO_Init+0x244>
 8000e26:	2302      	movs	r3, #2
 8000e28:	e002      	b.n	8000e30 <HAL_GPIO_Init+0x244>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <HAL_GPIO_Init+0x244>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	f002 0203 	and.w	r2, r2, #3
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	4093      	lsls	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e40:	4937      	ldr	r1, [pc, #220]	@ (8000f20 <HAL_GPIO_Init+0x334>)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	089b      	lsrs	r3, r3, #2
 8000e46:	3302      	adds	r3, #2
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f3c <HAL_GPIO_Init+0x350>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e72:	4a32      	ldr	r2, [pc, #200]	@ (8000f3c <HAL_GPIO_Init+0x350>)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e78:	4b30      	ldr	r3, [pc, #192]	@ (8000f3c <HAL_GPIO_Init+0x350>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e9c:	4a27      	ldr	r2, [pc, #156]	@ (8000f3c <HAL_GPIO_Init+0x350>)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ea2:	4b26      	ldr	r3, [pc, #152]	@ (8000f3c <HAL_GPIO_Init+0x350>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f3c <HAL_GPIO_Init+0x350>)
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <HAL_GPIO_Init+0x350>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ef0:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <HAL_GPIO_Init+0x350>)
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa22 f303 	lsr.w	r3, r2, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f47f ae78 	bne.w	8000bfc <HAL_GPIO_Init+0x10>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	371c      	adds	r7, #28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010000 	.word	0x40010000
 8000f24:	48000400 	.word	0x48000400
 8000f28:	48000800 	.word	0x48000800
 8000f2c:	48000c00 	.word	0x48000c00
 8000f30:	48001000 	.word	0x48001000
 8000f34:	48001400 	.word	0x48001400
 8000f38:	48001800 	.word	0x48001800
 8000f3c:	40010400 	.word	0x40010400

08000f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f50:	787b      	ldrb	r3, [r7, #1]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40007000 	.word	0x40007000

08000f8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f9a:	d130      	bne.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f9c:	4b23      	ldr	r3, [pc, #140]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fa8:	d038      	beq.n	800101c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000faa:	4b20      	ldr	r3, [pc, #128]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2232      	movs	r2, #50	@ 0x32
 8000fc0:	fb02 f303 	mul.w	r3, r2, r3
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001034 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fca:	0c9b      	lsrs	r3, r3, #18
 8000fcc:	3301      	adds	r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fd0:	e002      	b.n	8000fd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fe4:	d102      	bne.n	8000fec <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f2      	bne.n	8000fd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ff8:	d110      	bne.n	800101c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e00f      	b.n	800101e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800100a:	d007      	beq.n	800101c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800100c:	4b07      	ldr	r3, [pc, #28]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001014:	4a05      	ldr	r2, [pc, #20]	@ (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001016:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800101a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40007000 	.word	0x40007000
 8001030:	20000000 	.word	0x20000000
 8001034:	431bde83 	.word	0x431bde83

08001038 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e3ca      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800104a:	4b97      	ldr	r3, [pc, #604]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001054:	4b94      	ldr	r3, [pc, #592]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 80e4 	beq.w	8001234 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d007      	beq.n	8001082 <HAL_RCC_OscConfig+0x4a>
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	2b0c      	cmp	r3, #12
 8001076:	f040 808b 	bne.w	8001190 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2b01      	cmp	r3, #1
 800107e:	f040 8087 	bne.w	8001190 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001082:	4b89      	ldr	r3, [pc, #548]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <HAL_RCC_OscConfig+0x62>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e3a2      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a1a      	ldr	r2, [r3, #32]
 800109e:	4b82      	ldr	r3, [pc, #520]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <HAL_RCC_OscConfig+0x7c>
 80010aa:	4b7f      	ldr	r3, [pc, #508]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010b2:	e005      	b.n	80010c0 <HAL_RCC_OscConfig+0x88>
 80010b4:	4b7c      	ldr	r3, [pc, #496]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d223      	bcs.n	800110c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fd1d 	bl	8001b08 <RCC_SetFlashLatencyFromMSIRange>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e383      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010d8:	4b73      	ldr	r3, [pc, #460]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a72      	ldr	r2, [pc, #456]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b70      	ldr	r3, [pc, #448]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	496d      	ldr	r1, [pc, #436]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f6:	4b6c      	ldr	r3, [pc, #432]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	4968      	ldr	r1, [pc, #416]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001106:	4313      	orrs	r3, r2
 8001108:	604b      	str	r3, [r1, #4]
 800110a:	e025      	b.n	8001158 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800110c:	4b66      	ldr	r3, [pc, #408]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a65      	ldr	r2, [pc, #404]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001112:	f043 0308 	orr.w	r3, r3, #8
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b63      	ldr	r3, [pc, #396]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4960      	ldr	r1, [pc, #384]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001126:	4313      	orrs	r3, r2
 8001128:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800112a:	4b5f      	ldr	r3, [pc, #380]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	495b      	ldr	r1, [pc, #364]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800113a:	4313      	orrs	r3, r2
 800113c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d109      	bne.n	8001158 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fcdd 	bl	8001b08 <RCC_SetFlashLatencyFromMSIRange>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e343      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001158:	f000 fc4a 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 800115c:	4602      	mov	r2, r0
 800115e:	4b52      	ldr	r3, [pc, #328]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	4950      	ldr	r1, [pc, #320]	@ (80012ac <HAL_RCC_OscConfig+0x274>)
 800116a:	5ccb      	ldrb	r3, [r1, r3]
 800116c:	f003 031f 	and.w	r3, r3, #31
 8001170:	fa22 f303 	lsr.w	r3, r2, r3
 8001174:	4a4e      	ldr	r2, [pc, #312]	@ (80012b0 <HAL_RCC_OscConfig+0x278>)
 8001176:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001178:	4b4e      	ldr	r3, [pc, #312]	@ (80012b4 <HAL_RCC_OscConfig+0x27c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fbf3 	bl	8000968 <HAL_InitTick>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d052      	beq.n	8001232 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	e327      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d032      	beq.n	80011fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001198:	4b43      	ldr	r3, [pc, #268]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a42      	ldr	r2, [pc, #264]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fc30 	bl	8000a08 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ac:	f7ff fc2c 	bl	8000a08 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e310      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011be:	4b3a      	ldr	r3, [pc, #232]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ca:	4b37      	ldr	r3, [pc, #220]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a36      	ldr	r2, [pc, #216]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4b34      	ldr	r3, [pc, #208]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4931      	ldr	r1, [pc, #196]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011e8:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	492c      	ldr	r1, [pc, #176]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
 80011fc:	e01a      	b.n	8001234 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011fe:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a29      	ldr	r2, [pc, #164]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800120a:	f7ff fbfd 	bl	8000a08 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001212:	f7ff fbf9 	bl	8000a08 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e2dd      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001224:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f0      	bne.n	8001212 <HAL_RCC_OscConfig+0x1da>
 8001230:	e000      	b.n	8001234 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001232:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d074      	beq.n	800132a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	2b08      	cmp	r3, #8
 8001244:	d005      	beq.n	8001252 <HAL_RCC_OscConfig+0x21a>
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	2b0c      	cmp	r3, #12
 800124a:	d10e      	bne.n	800126a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	2b03      	cmp	r3, #3
 8001250:	d10b      	bne.n	800126a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d064      	beq.n	8001328 <HAL_RCC_OscConfig+0x2f0>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d160      	bne.n	8001328 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e2ba      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001272:	d106      	bne.n	8001282 <HAL_RCC_OscConfig+0x24a>
 8001274:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0b      	ldr	r2, [pc, #44]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800127a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	e026      	b.n	80012d0 <HAL_RCC_OscConfig+0x298>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800128a:	d115      	bne.n	80012b8 <HAL_RCC_OscConfig+0x280>
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001292:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b03      	ldr	r3, [pc, #12]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a02      	ldr	r2, [pc, #8]	@ (80012a8 <HAL_RCC_OscConfig+0x270>)
 800129e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	e014      	b.n	80012d0 <HAL_RCC_OscConfig+0x298>
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	08002aac 	.word	0x08002aac
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000004 	.word	0x20000004
 80012b8:	4ba0      	ldr	r3, [pc, #640]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a9f      	ldr	r2, [pc, #636]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80012be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b9d      	ldr	r3, [pc, #628]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a9c      	ldr	r2, [pc, #624]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80012ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d013      	beq.n	8001300 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff fb96 	bl	8000a08 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fb92 	bl	8000a08 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	@ 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e276      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012f2:	4b92      	ldr	r3, [pc, #584]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x2a8>
 80012fe:	e014      	b.n	800132a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001300:	f7ff fb82 	bl	8000a08 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fb7e 	bl	8000a08 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	@ 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e262      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800131a:	4b88      	ldr	r3, [pc, #544]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x2d0>
 8001326:	e000      	b.n	800132a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d060      	beq.n	80013f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2b04      	cmp	r3, #4
 800133a:	d005      	beq.n	8001348 <HAL_RCC_OscConfig+0x310>
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b0c      	cmp	r3, #12
 8001340:	d119      	bne.n	8001376 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d116      	bne.n	8001376 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001348:	4b7c      	ldr	r3, [pc, #496]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <HAL_RCC_OscConfig+0x328>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e23f      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001360:	4b76      	ldr	r3, [pc, #472]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	061b      	lsls	r3, r3, #24
 800136e:	4973      	ldr	r1, [pc, #460]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001374:	e040      	b.n	80013f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d023      	beq.n	80013c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137e:	4b6f      	ldr	r3, [pc, #444]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a6e      	ldr	r2, [pc, #440]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138a:	f7ff fb3d 	bl	8000a08 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff fb39 	bl	8000a08 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e21d      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a4:	4b65      	ldr	r3, [pc, #404]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b62      	ldr	r3, [pc, #392]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	061b      	lsls	r3, r3, #24
 80013be:	495f      	ldr	r1, [pc, #380]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
 80013c4:	e018      	b.n	80013f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c6:	4b5d      	ldr	r3, [pc, #372]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a5c      	ldr	r2, [pc, #368]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80013cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d2:	f7ff fb19 	bl	8000a08 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013da:	f7ff fb15 	bl	8000a08 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e1f9      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013ec:	4b53      	ldr	r3, [pc, #332]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f0      	bne.n	80013da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d03c      	beq.n	800147e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d01c      	beq.n	8001446 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140c:	4b4b      	ldr	r3, [pc, #300]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 800140e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001412:	4a4a      	ldr	r2, [pc, #296]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141c:	f7ff faf4 	bl	8000a08 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff faf0 	bl	8000a08 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e1d4      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001436:	4b41      	ldr	r3, [pc, #260]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0ef      	beq.n	8001424 <HAL_RCC_OscConfig+0x3ec>
 8001444:	e01b      	b.n	800147e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001446:	4b3d      	ldr	r3, [pc, #244]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800144c:	4a3b      	ldr	r2, [pc, #236]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 800144e:	f023 0301 	bic.w	r3, r3, #1
 8001452:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001456:	f7ff fad7 	bl	8000a08 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800145e:	f7ff fad3 	bl	8000a08 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e1b7      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001470:	4b32      	ldr	r3, [pc, #200]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1ef      	bne.n	800145e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 80a6 	beq.w	80015d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001490:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10d      	bne.n	80014b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149c:	4b27      	ldr	r3, [pc, #156]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 800149e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a0:	4a26      	ldr	r2, [pc, #152]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80014a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014a8:	4b24      	ldr	r3, [pc, #144]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 80014aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b4:	2301      	movs	r3, #1
 80014b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b8:	4b21      	ldr	r3, [pc, #132]	@ (8001540 <HAL_RCC_OscConfig+0x508>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d118      	bne.n	80014f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <HAL_RCC_OscConfig+0x508>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001540 <HAL_RCC_OscConfig+0x508>)
 80014ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d0:	f7ff fa9a 	bl	8000a08 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d8:	f7ff fa96 	bl	8000a08 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e17a      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <HAL_RCC_OscConfig+0x508>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d108      	bne.n	8001510 <HAL_RCC_OscConfig+0x4d8>
 80014fe:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001504:	4a0d      	ldr	r2, [pc, #52]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800150e:	e029      	b.n	8001564 <HAL_RCC_OscConfig+0x52c>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b05      	cmp	r3, #5
 8001516:	d115      	bne.n	8001544 <HAL_RCC_OscConfig+0x50c>
 8001518:	4b08      	ldr	r3, [pc, #32]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800151e:	4a07      	ldr	r2, [pc, #28]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001528:	4b04      	ldr	r3, [pc, #16]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 800152a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800152e:	4a03      	ldr	r2, [pc, #12]	@ (800153c <HAL_RCC_OscConfig+0x504>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001538:	e014      	b.n	8001564 <HAL_RCC_OscConfig+0x52c>
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	40007000 	.word	0x40007000
 8001544:	4b9c      	ldr	r3, [pc, #624]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800154a:	4a9b      	ldr	r2, [pc, #620]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800154c:	f023 0301 	bic.w	r3, r3, #1
 8001550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001554:	4b98      	ldr	r3, [pc, #608]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800155a:	4a97      	ldr	r2, [pc, #604]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800155c:	f023 0304 	bic.w	r3, r3, #4
 8001560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d016      	beq.n	800159a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156c:	f7ff fa4c 	bl	8000a08 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001572:	e00a      	b.n	800158a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001574:	f7ff fa48 	bl	8000a08 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e12a      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800158a:	4b8b      	ldr	r3, [pc, #556]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800158c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0ed      	beq.n	8001574 <HAL_RCC_OscConfig+0x53c>
 8001598:	e015      	b.n	80015c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159a:	f7ff fa35 	bl	8000a08 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a0:	e00a      	b.n	80015b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f7ff fa31 	bl	8000a08 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e113      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015b8:	4b7f      	ldr	r3, [pc, #508]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1ed      	bne.n	80015a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c6:	7ffb      	ldrb	r3, [r7, #31]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015cc:	4b7a      	ldr	r3, [pc, #488]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d0:	4a79      	ldr	r2, [pc, #484]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80015d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80fe 	beq.w	80017de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	f040 80d0 	bne.w	800178c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015ec:	4b72      	ldr	r3, [pc, #456]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f003 0203 	and.w	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d130      	bne.n	8001662 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	3b01      	subs	r3, #1
 800160c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800160e:	429a      	cmp	r2, r3
 8001610:	d127      	bne.n	8001662 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800161c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800161e:	429a      	cmp	r2, r3
 8001620:	d11f      	bne.n	8001662 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800162c:	2a07      	cmp	r2, #7
 800162e:	bf14      	ite	ne
 8001630:	2201      	movne	r2, #1
 8001632:	2200      	moveq	r2, #0
 8001634:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001636:	4293      	cmp	r3, r2
 8001638:	d113      	bne.n	8001662 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	3b01      	subs	r3, #1
 8001648:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800164a:	429a      	cmp	r2, r3
 800164c:	d109      	bne.n	8001662 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	085b      	lsrs	r3, r3, #1
 800165a:	3b01      	subs	r3, #1
 800165c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800165e:	429a      	cmp	r2, r3
 8001660:	d06e      	beq.n	8001740 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	2b0c      	cmp	r3, #12
 8001666:	d069      	beq.n	800173c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001668:	4b53      	ldr	r3, [pc, #332]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d105      	bne.n	8001680 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001674:	4b50      	ldr	r3, [pc, #320]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0ad      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001684:	4b4c      	ldr	r3, [pc, #304]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a4b      	ldr	r2, [pc, #300]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800168a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800168e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001690:	f7ff f9ba 	bl	8000a08 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff f9b6 	bl	8000a08 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e09a      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016aa:	4b43      	ldr	r3, [pc, #268]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b6:	4b40      	ldr	r3, [pc, #256]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	4b40      	ldr	r3, [pc, #256]	@ (80017bc <HAL_RCC_OscConfig+0x784>)
 80016bc:	4013      	ands	r3, r2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80016c6:	3a01      	subs	r2, #1
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	4311      	orrs	r1, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016d0:	0212      	lsls	r2, r2, #8
 80016d2:	4311      	orrs	r1, r2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80016d8:	0852      	lsrs	r2, r2, #1
 80016da:	3a01      	subs	r2, #1
 80016dc:	0552      	lsls	r2, r2, #21
 80016de:	4311      	orrs	r1, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016e4:	0852      	lsrs	r2, r2, #1
 80016e6:	3a01      	subs	r2, #1
 80016e8:	0652      	lsls	r2, r2, #25
 80016ea:	4311      	orrs	r1, r2
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016f0:	0912      	lsrs	r2, r2, #4
 80016f2:	0452      	lsls	r2, r2, #17
 80016f4:	430a      	orrs	r2, r1
 80016f6:	4930      	ldr	r1, [pc, #192]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016fc:	4b2e      	ldr	r3, [pc, #184]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a2d      	ldr	r2, [pc, #180]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001706:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001708:	4b2b      	ldr	r3, [pc, #172]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4a2a      	ldr	r2, [pc, #168]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800170e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001712:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001714:	f7ff f978 	bl	8000a08 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff f974 	bl	8000a08 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e058      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800172e:	4b22      	ldr	r3, [pc, #136]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800173a:	e050      	b.n	80017de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e04f      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001740:	4b1d      	ldr	r3, [pc, #116]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d148      	bne.n	80017de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800174c:	4b1a      	ldr	r3, [pc, #104]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a19      	ldr	r2, [pc, #100]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001756:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001758:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	4a16      	ldr	r2, [pc, #88]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 800175e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001762:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001764:	f7ff f950 	bl	8000a08 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176c:	f7ff f94c 	bl	8000a08 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e030      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x734>
 800178a:	e028      	b.n	80017de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d023      	beq.n	80017da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a08      	ldr	r2, [pc, #32]	@ (80017b8 <HAL_RCC_OscConfig+0x780>)
 8001798:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800179c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff f933 	bl	8000a08 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a4:	e00c      	b.n	80017c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff f92f 	bl	8000a08 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d905      	bls.n	80017c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e013      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
 80017b8:	40021000 	.word	0x40021000
 80017bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <HAL_RCC_OscConfig+0x7b0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1ec      	bne.n	80017a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_RCC_OscConfig+0x7b0>)
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	4905      	ldr	r1, [pc, #20]	@ (80017e8 <HAL_RCC_OscConfig+0x7b0>)
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_RCC_OscConfig+0x7b4>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	60cb      	str	r3, [r1, #12]
 80017d8:	e001      	b.n	80017de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	feeefffc 	.word	0xfeeefffc

080017f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0e7      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001804:	4b75      	ldr	r3, [pc, #468]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d910      	bls.n	8001834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b72      	ldr	r3, [pc, #456]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 0207 	bic.w	r2, r3, #7
 800181a:	4970      	ldr	r1, [pc, #448]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b6e      	ldr	r3, [pc, #440]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0cf      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d010      	beq.n	8001862 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	4b66      	ldr	r3, [pc, #408]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800184c:	429a      	cmp	r2, r3
 800184e:	d908      	bls.n	8001862 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001850:	4b63      	ldr	r3, [pc, #396]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	4960      	ldr	r1, [pc, #384]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d04c      	beq.n	8001908 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b03      	cmp	r3, #3
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001876:	4b5a      	ldr	r3, [pc, #360]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d121      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0a6      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188e:	4b54      	ldr	r3, [pc, #336]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d115      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e09a      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a6:	4b4e      	ldr	r3, [pc, #312]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e08e      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b6:	4b4a      	ldr	r3, [pc, #296]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e086      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018c6:	4b46      	ldr	r3, [pc, #280]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f023 0203 	bic.w	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4943      	ldr	r1, [pc, #268]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018d8:	f7ff f896 	bl	8000a08 <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e0:	f7ff f892 	bl	8000a08 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e06e      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	4b3a      	ldr	r3, [pc, #232]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 020c 	and.w	r2, r3, #12
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	429a      	cmp	r2, r3
 8001906:	d1eb      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d010      	beq.n	8001936 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	4b31      	ldr	r3, [pc, #196]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001920:	429a      	cmp	r2, r3
 8001922:	d208      	bcs.n	8001936 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001924:	4b2e      	ldr	r3, [pc, #184]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	492b      	ldr	r1, [pc, #172]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001936:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d210      	bcs.n	8001966 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001944:	4b25      	ldr	r3, [pc, #148]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 0207 	bic.w	r2, r3, #7
 800194c:	4923      	ldr	r1, [pc, #140]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001954:	4b21      	ldr	r3, [pc, #132]	@ (80019dc <HAL_RCC_ClockConfig+0x1ec>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e036      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001972:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	4918      	ldr	r1, [pc, #96]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001980:	4313      	orrs	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001990:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4910      	ldr	r1, [pc, #64]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019a4:	f000 f824 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <HAL_RCC_ClockConfig+0x1f0>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	490b      	ldr	r1, [pc, #44]	@ (80019e4 <HAL_RCC_ClockConfig+0x1f4>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
 80019c0:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f8>)
 80019c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_RCC_ClockConfig+0x1fc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe ffcd 	bl	8000968 <HAL_InitTick>
 80019ce:	4603      	mov	r3, r0
 80019d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80019d2:	7afb      	ldrb	r3, [r7, #11]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40022000 	.word	0x40022000
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08002aac 	.word	0x08002aac
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	@ 0x24
 80019f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fe:	4b3e      	ldr	r3, [pc, #248]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a08:	4b3b      	ldr	r3, [pc, #236]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0x34>
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2b0c      	cmp	r3, #12
 8001a1c:	d121      	bne.n	8001a62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d11e      	bne.n	8001a62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a24:	4b34      	ldr	r3, [pc, #208]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d107      	bne.n	8001a40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a30:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e005      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a40:	4b2d      	ldr	r3, [pc, #180]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10d      	bne.n	8001a78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d102      	bne.n	8001a6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a68:	4b25      	ldr	r3, [pc, #148]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	e004      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a74:	4b23      	ldr	r3, [pc, #140]	@ (8001b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d134      	bne.n	8001ae8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d003      	beq.n	8001a96 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d003      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0xac>
 8001a94:	e005      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a98:	617b      	str	r3, [r7, #20]
      break;
 8001a9a:	e005      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a9e:	617b      	str	r3, [r7, #20]
      break;
 8001aa0:	e002      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	617b      	str	r3, [r7, #20]
      break;
 8001aa6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	fb03 f202 	mul.w	r2, r3, r2
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ace:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	0e5b      	lsrs	r3, r3, #25
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	3301      	adds	r3, #1
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ae8:	69bb      	ldr	r3, [r7, #24]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3724      	adds	r7, #36	@ 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	08002abc 	.word	0x08002abc
 8001b00:	00f42400 	.word	0x00f42400
 8001b04:	007a1200 	.word	0x007a1200

08001b08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b14:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b20:	f7ff fa26 	bl	8000f70 <HAL_PWREx_GetVoltageRange>
 8001b24:	6178      	str	r0, [r7, #20]
 8001b26:	e014      	b.n	8001b52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b28:	4b25      	ldr	r3, [pc, #148]	@ (8001bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2c:	4a24      	ldr	r2, [pc, #144]	@ (8001bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b34:	4b22      	ldr	r3, [pc, #136]	@ (8001bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b40:	f7ff fa16 	bl	8000f70 <HAL_PWREx_GetVoltageRange>
 8001b44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b46:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b50:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b58:	d10b      	bne.n	8001b72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b80      	cmp	r3, #128	@ 0x80
 8001b5e:	d919      	bls.n	8001b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b64:	d902      	bls.n	8001b6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b66:	2302      	movs	r3, #2
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	e013      	b.n	8001b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	e010      	b.n	8001b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b80      	cmp	r3, #128	@ 0x80
 8001b76:	d902      	bls.n	8001b7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b78:	2303      	movs	r3, #3
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	e00a      	b.n	8001b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b80      	cmp	r3, #128	@ 0x80
 8001b82:	d102      	bne.n	8001b8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b84:	2302      	movs	r3, #2
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	e004      	b.n	8001b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b70      	cmp	r3, #112	@ 0x70
 8001b8e:	d101      	bne.n	8001b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b90:	2301      	movs	r3, #1
 8001b92:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f023 0207 	bic.w	r2, r3, #7
 8001b9c:	4909      	ldr	r1, [pc, #36]	@ (8001bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ba4:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d001      	beq.n	8001bb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40022000 	.word	0x40022000

08001bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e095      	b.n	8001d06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d108      	bne.n	8001bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bea:	d009      	beq.n	8001c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
 8001bf2:	e005      	b.n	8001c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7fe fdba 	bl	8000794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001c40:	d902      	bls.n	8001c48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	e002      	b.n	8001c4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001c56:	d007      	beq.n	8001c68 <HAL_SPI_Init+0xa0>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001c60:	d002      	beq.n	8001c68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001caa:	ea42 0103 	orr.w	r1, r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	0c1b      	lsrs	r3, r3, #16
 8001cc4:	f003 0204 	and.w	r2, r3, #4
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001ce4:	ea42 0103 	orr.w	r1, r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b088      	sub	sp, #32
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d1e:	f7fe fe73 	bl	8000a08 <HAL_GetTick>
 8001d22:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d001      	beq.n	8001d38 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001d34:	2302      	movs	r3, #2
 8001d36:	e15c      	b.n	8001ff2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <HAL_SPI_Transmit+0x36>
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e154      	b.n	8001ff2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_SPI_Transmit+0x48>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e14d      	b.n	8001ff2 <HAL_SPI_Transmit+0x2e4>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2203      	movs	r2, #3
 8001d62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	88fa      	ldrh	r2, [r7, #6]
 8001d76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	88fa      	ldrh	r2, [r7, #6]
 8001d7c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001da8:	d10f      	bne.n	8001dca <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001db8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001dc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd4:	2b40      	cmp	r3, #64	@ 0x40
 8001dd6:	d007      	beq.n	8001de8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001de6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001df0:	d952      	bls.n	8001e98 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <HAL_SPI_Transmit+0xf2>
 8001dfa:	8b7b      	ldrh	r3, [r7, #26]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d145      	bne.n	8001e8c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e04:	881a      	ldrh	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e10:	1c9a      	adds	r2, r3, #2
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e24:	e032      	b.n	8001e8c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d112      	bne.n	8001e5a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e38:	881a      	ldrh	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e44:	1c9a      	adds	r2, r3, #2
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001e58:	e018      	b.n	8001e8c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e5a:	f7fe fdd5 	bl	8000a08 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d803      	bhi.n	8001e72 <HAL_SPI_Transmit+0x164>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d102      	bne.n	8001e78 <HAL_SPI_Transmit+0x16a>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e0b2      	b.n	8001ff2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1c7      	bne.n	8001e26 <HAL_SPI_Transmit+0x118>
 8001e96:	e083      	b.n	8001fa0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_SPI_Transmit+0x198>
 8001ea0:	8b7b      	ldrh	r3, [r7, #26]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d177      	bne.n	8001f96 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d912      	bls.n	8001ed6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb4:	881a      	ldrh	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec0:	1c9a      	adds	r2, r3, #2
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b02      	subs	r3, #2
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001ed4:	e05f      	b.n	8001f96 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	330c      	adds	r3, #12
 8001ee0:	7812      	ldrb	r2, [r2, #0]
 8001ee2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001efc:	e04b      	b.n	8001f96 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d12b      	bne.n	8001f64 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d912      	bls.n	8001f3c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1a:	881a      	ldrh	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f26:	1c9a      	adds	r2, r3, #2
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b02      	subs	r3, #2
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001f3a:	e02c      	b.n	8001f96 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	330c      	adds	r3, #12
 8001f46:	7812      	ldrb	r2, [r2, #0]
 8001f48:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001f62:	e018      	b.n	8001f96 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f64:	f7fe fd50 	bl	8000a08 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d803      	bhi.n	8001f7c <HAL_SPI_Transmit+0x26e>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7a:	d102      	bne.n	8001f82 <HAL_SPI_Transmit+0x274>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e02d      	b.n	8001ff2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ae      	bne.n	8001efe <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	6839      	ldr	r1, [r7, #0]
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 fd03 	bl	80029b0 <SPI_EndRxTxTransaction>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10a      	bne.n	8001fd4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
  }
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3720      	adds	r7, #32
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b088      	sub	sp, #32
 8001ffe:	af02      	add	r7, sp, #8
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	4613      	mov	r3, r2
 8002008:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d001      	beq.n	800201a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002016:	2302      	movs	r3, #2
 8002018:	e123      	b.n	8002262 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002022:	d112      	bne.n	800204a <HAL_SPI_Receive+0x50>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10e      	bne.n	800204a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2204      	movs	r2, #4
 8002030:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002034:	88fa      	ldrh	r2, [r7, #6]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	4613      	mov	r3, r2
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f912 	bl	800226a <HAL_SPI_TransmitReceive>
 8002046:	4603      	mov	r3, r0
 8002048:	e10b      	b.n	8002262 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800204a:	f7fe fcdd 	bl	8000a08 <HAL_GetTick>
 800204e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_SPI_Receive+0x62>
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e100      	b.n	8002262 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_SPI_Receive+0x74>
 800206a:	2302      	movs	r3, #2
 800206c:	e0f9      	b.n	8002262 <HAL_SPI_Receive+0x268>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2204      	movs	r2, #4
 800207a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	88fa      	ldrh	r2, [r7, #6]
 800208e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	88fa      	ldrh	r2, [r7, #6]
 8002096:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80020c0:	d908      	bls.n	80020d4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	e007      	b.n	80020e4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020e2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020ec:	d10f      	bne.n	800210e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002118:	2b40      	cmp	r3, #64	@ 0x40
 800211a:	d007      	beq.n	800212c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800212a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002134:	d875      	bhi.n	8002222 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002136:	e037      	b.n	80021a8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b01      	cmp	r3, #1
 8002144:	d117      	bne.n	8002176 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f103 020c 	add.w	r2, r3, #12
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	7812      	ldrb	r2, [r2, #0]
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002174:	e018      	b.n	80021a8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002176:	f7fe fc47 	bl	8000a08 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d803      	bhi.n	800218e <HAL_SPI_Receive+0x194>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d102      	bne.n	8002194 <HAL_SPI_Receive+0x19a>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d109      	bne.n	80021a8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e05c      	b.n	8002262 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1c1      	bne.n	8002138 <HAL_SPI_Receive+0x13e>
 80021b4:	e03b      	b.n	800222e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d115      	bne.n	80021f0 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	b292      	uxth	r2, r2
 80021d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	1c9a      	adds	r2, r3, #2
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80021ee:	e018      	b.n	8002222 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021f0:	f7fe fc0a 	bl	8000a08 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d803      	bhi.n	8002208 <HAL_SPI_Receive+0x20e>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002206:	d102      	bne.n	800220e <HAL_SPI_Receive+0x214>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e01f      	b.n	8002262 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1c3      	bne.n	80021b6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fb64 	bl	8002900 <SPI_EndRxTransaction>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2220      	movs	r2, #32
 8002242:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8002260:	2300      	movs	r3, #0
  }
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b08a      	sub	sp, #40	@ 0x28
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002278:	2301      	movs	r3, #1
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800227c:	f7fe fbc4 	bl	8000a08 <HAL_GetTick>
 8002280:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002288:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002290:	887b      	ldrh	r3, [r7, #2]
 8002292:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002298:	7ffb      	ldrb	r3, [r7, #31]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d00c      	beq.n	80022b8 <HAL_SPI_TransmitReceive+0x4e>
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022a4:	d106      	bne.n	80022b4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <HAL_SPI_TransmitReceive+0x4a>
 80022ae:	7ffb      	ldrb	r3, [r7, #31]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d001      	beq.n	80022b8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80022b4:	2302      	movs	r3, #2
 80022b6:	e1f3      	b.n	80026a0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_SPI_TransmitReceive+0x60>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <HAL_SPI_TransmitReceive+0x60>
 80022c4:	887b      	ldrh	r3, [r7, #2]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1e8      	b.n	80026a0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_SPI_TransmitReceive+0x72>
 80022d8:	2302      	movs	r3, #2
 80022da:	e1e1      	b.n	80026a0 <HAL_SPI_TransmitReceive+0x436>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d003      	beq.n	80022f8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2205      	movs	r2, #5
 80022f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	887a      	ldrh	r2, [r7, #2]
 800231e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	887a      	ldrh	r2, [r7, #2]
 8002324:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800233a:	d802      	bhi.n	8002342 <HAL_SPI_TransmitReceive+0xd8>
 800233c:	8abb      	ldrh	r3, [r7, #20]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d908      	bls.n	8002354 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	e007      	b.n	8002364 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002362:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800236e:	2b40      	cmp	r3, #64	@ 0x40
 8002370:	d007      	beq.n	8002382 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002380:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800238a:	f240 8083 	bls.w	8002494 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <HAL_SPI_TransmitReceive+0x132>
 8002396:	8afb      	ldrh	r3, [r7, #22]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d16f      	bne.n	800247c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a0:	881a      	ldrh	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ac:	1c9a      	adds	r2, r3, #2
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023c0:	e05c      	b.n	800247c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d11b      	bne.n	8002408 <HAL_SPI_TransmitReceive+0x19e>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d016      	beq.n	8002408 <HAL_SPI_TransmitReceive+0x19e>
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d113      	bne.n	8002408 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e4:	881a      	ldrh	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f0:	1c9a      	adds	r2, r3, #2
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d11c      	bne.n	8002450 <HAL_SPI_TransmitReceive+0x1e6>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d016      	beq.n	8002450 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	b292      	uxth	r2, r2
 800242e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	1c9a      	adds	r2, r3, #2
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800244c:	2301      	movs	r3, #1
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002450:	f7fe fada 	bl	8000a08 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800245c:	429a      	cmp	r2, r3
 800245e:	d80d      	bhi.n	800247c <HAL_SPI_TransmitReceive+0x212>
 8002460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002466:	d009      	beq.n	800247c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e111      	b.n	80026a0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d19d      	bne.n	80023c2 <HAL_SPI_TransmitReceive+0x158>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d197      	bne.n	80023c2 <HAL_SPI_TransmitReceive+0x158>
 8002492:	e0e5      	b.n	8002660 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_SPI_TransmitReceive+0x23a>
 800249c:	8afb      	ldrh	r3, [r7, #22]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	f040 80d1 	bne.w	8002646 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d912      	bls.n	80024d4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b2:	881a      	ldrh	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024be:	1c9a      	adds	r2, r3, #2
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b02      	subs	r3, #2
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80024d2:	e0b8      	b.n	8002646 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	7812      	ldrb	r2, [r2, #0]
 80024e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024fa:	e0a4      	b.n	8002646 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b02      	cmp	r3, #2
 8002508:	d134      	bne.n	8002574 <HAL_SPI_TransmitReceive+0x30a>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d02f      	beq.n	8002574 <HAL_SPI_TransmitReceive+0x30a>
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	2b01      	cmp	r3, #1
 8002518:	d12c      	bne.n	8002574 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d912      	bls.n	800254a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002528:	881a      	ldrh	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002534:	1c9a      	adds	r2, r3, #2
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b02      	subs	r3, #2
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002548:	e012      	b.n	8002570 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	330c      	adds	r3, #12
 8002554:	7812      	ldrb	r2, [r2, #0]
 8002556:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d148      	bne.n	8002614 <HAL_SPI_TransmitReceive+0x3aa>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d042      	beq.n	8002614 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d923      	bls.n	80025e2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	b292      	uxth	r2, r2
 80025a6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	1c9a      	adds	r2, r3, #2
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b02      	subs	r3, #2
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d81f      	bhi.n	8002610 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	e016      	b.n	8002610 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f103 020c 	add.w	r2, r3, #12
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	7812      	ldrb	r2, [r2, #0]
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002610:	2301      	movs	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002614:	f7fe f9f8 	bl	8000a08 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002620:	429a      	cmp	r2, r3
 8002622:	d803      	bhi.n	800262c <HAL_SPI_TransmitReceive+0x3c2>
 8002624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d102      	bne.n	8002632 <HAL_SPI_TransmitReceive+0x3c8>
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e02c      	b.n	80026a0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	f47f af55 	bne.w	80024fc <HAL_SPI_TransmitReceive+0x292>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	f47f af4e 	bne.w	80024fc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f9a3 	bl	80029b0 <SPI_EndRxTxTransaction>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e00e      	b.n	80026a0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800269e:	2300      	movs	r3, #0
  }
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3728      	adds	r7, #40	@ 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026b6:	b2db      	uxtb	r3, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026d4:	f7fe f998 	bl	8000a08 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026e4:	f7fe f990 	bl	8000a08 <HAL_GetTick>
 80026e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026ea:	4b39      	ldr	r3, [pc, #228]	@ (80027d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	015b      	lsls	r3, r3, #5
 80026f0:	0d1b      	lsrs	r3, r3, #20
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026fa:	e054      	b.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002702:	d050      	beq.n	80027a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002704:	f7fe f980 	bl	8000a08 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	429a      	cmp	r2, r3
 8002712:	d902      	bls.n	800271a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d13d      	bne.n	8002796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002732:	d111      	bne.n	8002758 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800273c:	d004      	beq.n	8002748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002746:	d107      	bne.n	8002758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002760:	d10f      	bne.n	8002782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e017      	b.n	80027c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4013      	ands	r3, r2
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d19b      	bne.n	80026fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000000 	.word	0x20000000

080027d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	@ 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80027e6:	f7fe f90f 	bl	8000a08 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80027f6:	f7fe f907 	bl	8000a08 <HAL_GetTick>
 80027fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	330c      	adds	r3, #12
 8002802:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002804:	4b3d      	ldr	r3, [pc, #244]	@ (80028fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00da      	lsls	r2, r3, #3
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	0d1b      	lsrs	r3, r3, #20
 8002814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800281c:	e060      	b.n	80028e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002824:	d107      	bne.n	8002836 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d104      	bne.n	8002836 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002834:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d050      	beq.n	80028e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800283e:	f7fe f8e3 	bl	8000a08 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800284a:	429a      	cmp	r2, r3
 800284c:	d902      	bls.n	8002854 <SPI_WaitFifoStateUntilTimeout+0x80>
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	2b00      	cmp	r3, #0
 8002852:	d13d      	bne.n	80028d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002862:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800286c:	d111      	bne.n	8002892 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002876:	d004      	beq.n	8002882 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002880:	d107      	bne.n	8002892 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002890:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800289a:	d10f      	bne.n	80028bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e010      	b.n	80028f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	3b01      	subs	r3, #1
 80028de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	4013      	ands	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d196      	bne.n	800281e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3728      	adds	r7, #40	@ 0x28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000000 	.word	0x20000000

08002900 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002914:	d111      	bne.n	800293a <SPI_EndRxTransaction+0x3a>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800291e:	d004      	beq.n	800292a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002928:	d107      	bne.n	800293a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002938:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2200      	movs	r2, #0
 8002942:	2180      	movs	r1, #128	@ 0x80
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f7ff febd 	bl	80026c4 <SPI_WaitFlagStateUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d007      	beq.n	8002960 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002954:	f043 0220 	orr.w	r2, r3, #32
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e023      	b.n	80029a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002968:	d11d      	bne.n	80029a6 <SPI_EndRxTransaction+0xa6>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002972:	d004      	beq.n	800297e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800297c:	d113      	bne.n	80029a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2200      	movs	r2, #0
 8002986:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f7ff ff22 	bl	80027d4 <SPI_WaitFifoStateUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299a:	f043 0220 	orr.w	r2, r3, #32
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e000      	b.n	80029a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff ff03 	bl	80027d4 <SPI_WaitFifoStateUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d8:	f043 0220 	orr.w	r2, r3, #32
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e027      	b.n	8002a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2200      	movs	r2, #0
 80029ec:	2180      	movs	r1, #128	@ 0x80
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f7ff fe68 	bl	80026c4 <SPI_WaitFlagStateUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e014      	b.n	8002a34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f7ff fedc 	bl	80027d4 <SPI_WaitFifoStateUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a26:	f043 0220 	orr.w	r2, r3, #32
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e000      	b.n	8002a34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <memset>:
 8002a3c:	4402      	add	r2, r0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d100      	bne.n	8002a46 <memset+0xa>
 8002a44:	4770      	bx	lr
 8002a46:	f803 1b01 	strb.w	r1, [r3], #1
 8002a4a:	e7f9      	b.n	8002a40 <memset+0x4>

08002a4c <__libc_init_array>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8002a84 <__libc_init_array+0x38>)
 8002a50:	4c0d      	ldr	r4, [pc, #52]	@ (8002a88 <__libc_init_array+0x3c>)
 8002a52:	1b64      	subs	r4, r4, r5
 8002a54:	10a4      	asrs	r4, r4, #2
 8002a56:	2600      	movs	r6, #0
 8002a58:	42a6      	cmp	r6, r4
 8002a5a:	d109      	bne.n	8002a70 <__libc_init_array+0x24>
 8002a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8002a8c <__libc_init_array+0x40>)
 8002a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8002a90 <__libc_init_array+0x44>)
 8002a60:	f000 f818 	bl	8002a94 <_init>
 8002a64:	1b64      	subs	r4, r4, r5
 8002a66:	10a4      	asrs	r4, r4, #2
 8002a68:	2600      	movs	r6, #0
 8002a6a:	42a6      	cmp	r6, r4
 8002a6c:	d105      	bne.n	8002a7a <__libc_init_array+0x2e>
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
 8002a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a74:	4798      	blx	r3
 8002a76:	3601      	adds	r6, #1
 8002a78:	e7ee      	b.n	8002a58 <__libc_init_array+0xc>
 8002a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7e:	4798      	blx	r3
 8002a80:	3601      	adds	r6, #1
 8002a82:	e7f2      	b.n	8002a6a <__libc_init_array+0x1e>
 8002a84:	08002aec 	.word	0x08002aec
 8002a88:	08002aec 	.word	0x08002aec
 8002a8c:	08002aec 	.word	0x08002aec
 8002a90:	08002af0 	.word	0x08002af0

08002a94 <_init>:
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	bf00      	nop
 8002a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9a:	bc08      	pop	{r3}
 8002a9c:	469e      	mov	lr, r3
 8002a9e:	4770      	bx	lr

08002aa0 <_fini>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	bf00      	nop
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr
